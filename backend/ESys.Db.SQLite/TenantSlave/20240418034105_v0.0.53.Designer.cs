// <auto-generated />
using System;
using ESys.Db.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESys.Db.SQLite.TenantSlave
{
    [DbContext(typeof(TenantSlaveDbContext))]
    [Migration("20240418034105_v0.0.53")]
    partial class v0053
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApprovalResult")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Belongs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowInstanceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApprovalEntity");
                });

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Abandoned")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovalEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OperationTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalEntityId");

                    b.ToTable("ApprovalItem");
                });

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovalEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpectCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIdStr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalEntityId");

                    b.ToTable("ApprovalStep");
                });

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalStepAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovalEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpectCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserIdStr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ApprovalStepAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.AllSystemPromptV", b =>
                {
                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteBarcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteClassificationDesc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SiteClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteTypeDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemBarcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemClassificationDesc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SystemClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("SystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemTypeDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("SystemTypeId")
                        .HasColumnType("INTEGER");

                    b.ToView("AllSystemPromptV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Classification");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.ClassificationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ClassificationAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Cycle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CheckLimits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IncludeCycleName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("Cycle");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.CycleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CheckLimits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IncludeCycleName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("CycleAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.DataType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "String",
                            En = "String",
                            IsActive = true,
                            Name = "String",
                            Zh = "字符串"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Integer",
                            En = "Integer",
                            IsActive = true,
                            Name = "Integer",
                            Zh = "整数"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Double",
                            En = "Double",
                            IsActive = true,
                            Name = "Double",
                            Zh = "小数"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.DataTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DataTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.DataTypeSign", b =>
                {
                    b.Property<int>("DataTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DataTypeId", "SignId");

                    b.HasIndex("SignId");

                    b.ToTable("DataTypeSign");

                    b.HasData(
                        new
                        {
                            DataTypeId = 1,
                            SignId = 1
                        },
                        new
                        {
                            DataTypeId = 1,
                            SignId = 2
                        },
                        new
                        {
                            DataTypeId = 1,
                            SignId = 3
                        },
                        new
                        {
                            DataTypeId = 1,
                            SignId = 4
                        },
                        new
                        {
                            DataTypeId = 1,
                            SignId = 5
                        },
                        new
                        {
                            DataTypeId = 2,
                            SignId = 1
                        },
                        new
                        {
                            DataTypeId = 2,
                            SignId = 2
                        },
                        new
                        {
                            DataTypeId = 2,
                            SignId = 3
                        },
                        new
                        {
                            DataTypeId = 2,
                            SignId = 4
                        },
                        new
                        {
                            DataTypeId = 2,
                            SignId = 5
                        },
                        new
                        {
                            DataTypeId = 3,
                            SignId = 1
                        },
                        new
                        {
                            DataTypeId = 3,
                            SignId = 2
                        },
                        new
                        {
                            DataTypeId = 3,
                            SignId = 3
                        },
                        new
                        {
                            DataTypeId = 3,
                            SignId = 4
                        },
                        new
                        {
                            DataTypeId = 3,
                            SignId = 5
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.DeviceConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalConfig")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfficialConfig")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DeviceConfig");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.DeviceConfigAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalConfig")
                        .HasColumnType("TEXT");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfficialConfig")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DeviceConfigAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EnvironmentDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnvironmentDef");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "N",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "None",
                            IsActive = true,
                            IsDefault = false,
                            Name = "None",
                            Sequence = 1,
                            Zh = "无"
                        },
                        new
                        {
                            Id = 2,
                            Code = "S",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "Static",
                            IsActive = true,
                            IsDefault = false,
                            Name = "Static",
                            Sequence = 1,
                            Zh = "静态"
                        },
                        new
                        {
                            Id = 3,
                            Code = "D",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "Dynamic",
                            IsActive = true,
                            IsDefault = true,
                            Name = "Dynamic",
                            Sequence = 2,
                            Zh = "动态"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AR",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "At Rest",
                            IsActive = false,
                            IsDefault = false,
                            Name = "At Rest",
                            Sequence = 3,
                            Zh = "At Rest"
                        },
                        new
                        {
                            Id = 5,
                            Code = "IO",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "In Operation",
                            IsActive = false,
                            IsDefault = false,
                            Name = "In Operation",
                            Sequence = 4,
                            Zh = "In Operation"
                        },
                        new
                        {
                            Id = 6,
                            Code = "V",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "Validation",
                            IsActive = true,
                            IsDefault = false,
                            Name = "Validation",
                            Sequence = 5,
                            Zh = "验证"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EnvironmentDefAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EnvironmentDefAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("CalibrationDate")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CalibrationValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeviceConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastSyncDataTimestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastSyncUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long?>("NextCalibrationDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceConfigId")
                        .IsUnique();

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Name");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CalibrationDate")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CalibrationValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeviceConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastSyncDataTimestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastSyncUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("NextCalibrationDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EquipmentAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoadingMode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("EquipmentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "No equipment type",
                            IsActive = true,
                            Version = 0
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Incubator",
                            IsActive = true,
                            Version = 0
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Active Air Sampler",
                            IsActive = true,
                            Version = 0
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Particulate Counter",
                            IsActive = true,
                            Version = 0
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoadingMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("EquipmentTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.EquipmentV", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CalibrationDate")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("CalibrationValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("ControlNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquipmentTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("NextCalibrationDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerformedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PerformedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.ToView("EquipmentV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.GrowthPromotionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StatusCode");

                    b.ToTable("GrowthPromotionStatus");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "Pass",
                            IsActive = true,
                            Name = "Pass",
                            StatusCode = "PASS",
                            Zh = "通过"
                        },
                        new
                        {
                            Id = 101,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "Quarantine",
                            IsActive = true,
                            Name = "Quarantine",
                            StatusCode = "FAIL",
                            Zh = "未通过"
                        },
                        new
                        {
                            Id = 102,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "At Risk",
                            IsActive = true,
                            Name = "At Risk",
                            StatusCode = "RISK",
                            Zh = "待确认"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.GrowthPromotionStatusAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("GrowthPromotionStatusAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitDef", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountTowardFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deviation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EmailNotify")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExecutePerCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PeriodCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Prevalence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportableOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReportableValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RescheduleCount")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("RescheduleOffset")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResetFreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ScreenNotify")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SourceLimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceLimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LimitTypeId");

                    b.HasIndex("SourceLimitDefId");

                    b.HasIndex("SourceLimitTypeId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("LimitDef");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitDefAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountTowardFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deviation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EmailNotify")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExecutePerCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PeriodCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Prevalence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportableOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReportableValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RescheduleCount")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("RescheduleOffset")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResetFreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ScreenNotify")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SourceLimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceLimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitDefAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LimitRuleGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LimitValue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SignAndId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LimitRuleGroupId");

                    b.HasIndex("LimitTokenId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SignAndId");

                    b.HasIndex("SignId");

                    b.ToTable("LimitRule");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRuleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LimitRuleGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LimitValue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SignAndId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitRuleAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRuleGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogicSymbol")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LimitDefId");

                    b.HasIndex("LimitId");

                    b.HasIndex("ParentId");

                    b.ToTable("LimitRuleGroup");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRuleGroupAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogicSymbol")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitRuleGroupAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedEntity")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LimitToken");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Environment (static, dynamic)",
                            IsActive = true,
                            Name = "ENVIRONMENT",
                            RelatedEntity = "ESys.Infrastructure.Entity.EnvironmentDef"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Site Classification",
                            IsActive = true,
                            Name = "CLASS",
                            RelatedEntity = "ESys.Infrastructure.Entity.Classification"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Sample volume (e.g., 1000)",
                            IsActive = true,
                            Name = "SAMPLEVOLUME"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Personnel Site",
                            IsActive = true,
                            Name = "PERSONNELSITE",
                            RelatedEntity = "ESys.Infrastructure.Entity.PersonnelSite"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Product",
                            IsActive = true,
                            Name = "PRODUCT",
                            RelatedEntity = "ESys.Infrastructure.Entity.Product"
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Site Type",
                            IsActive = true,
                            Name = "SITETYPE",
                            RelatedEntity = "ESys.Infrastructure.Entity.SiteType"
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Location",
                            IsActive = true,
                            Name = "LOCATION",
                            RelatedEntity = "ESys.Infrastructure.Entity.Location"
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Objectionable Organism",
                            IsActive = true,
                            Name = "OBJECTIONABLE"
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Organism Characterization",
                            IsActive = true,
                            Name = "CHARACTERIZATION",
                            RelatedEntity = "ESys.Infrastructure.Entity.OrganismChar"
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Location Path",
                            IsActive = true,
                            Name = "LOCATIONPATH",
                            RelatedEntity = "ESys.Infrastructure.Entity.Location"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitTokenAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedEntity")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitTokenAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitTokenSign", b =>
                {
                    b.Property<int>("LimitTokenId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LimitTokenId", "SignId");

                    b.HasIndex("SignId");

                    b.ToTable("LimitTokenSign");

                    b.HasData(
                        new
                        {
                            LimitTokenId = 1,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 2,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 3,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 4,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 5,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 6,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 7,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 8,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 9,
                            SignId = 5
                        },
                        new
                        {
                            LimitTokenId = 10,
                            SignId = 5
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Weight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LimitType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FFFFA500",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Alert",
                            En = "Alert",
                            IsActive = true,
                            Name = "Alert",
                            Weight = 50u,
                            Zh = "警戒限"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#FFFF0000",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Action",
                            En = "Action",
                            IsActive = true,
                            Name = "Action",
                            Weight = 100u,
                            Zh = "行动限"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FF0000FF",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Organism ID Required",
                            En = "Organism ID Required",
                            IsActive = true,
                            Name = "Organism ID Required",
                            Weight = 40u,
                            Zh = "是否需要菌种鉴定"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#FF0000FF",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Other",
                            En = "Other",
                            IsActive = true,
                            Name = "Other",
                            Weight = 30u,
                            Zh = "其它"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Weight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("SecondClassificationId");

                    b.HasIndex("VisioDiagramId");

                    b.HasIndex("Id", "ParentId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LocationAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Breadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationPath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("LocationExtra");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Name", "Description", "IsActive");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LocationTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationV", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Breadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.ToView("LocationV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapCategoryId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MapCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MapAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("MapCategory");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategoryAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MapCategoryAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AlwaysDefault")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChildMeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DecimalLength")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DefaultFromFormula")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Format")
                        .HasColumnType("TEXT");

                    b.Property<string>("Formula")
                        .HasMaxLength(4000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ParticleSize")
                        .HasPrecision(15, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChildMeasurementId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("TimeFrameDilutionId");

                    b.HasIndex("TimeFrameId", "Name");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AlwaysDefault")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChildMeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DecimalLength")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DefaultFromFormula")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .HasColumnType("TEXT");

                    b.Property<string>("Formula")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ParticleSize")
                        .HasPrecision(15, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MeasurementAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementCycle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CycleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("MeasurementId", "CycleId");

                    b.ToTable("MeasurementCycle");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementCycleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CycleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MeasurementCycleAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementListDef", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayText")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Operation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.ToTable("MeasurementListDef");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementListDefAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayText")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Operation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MeasurementListDefAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementSign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SignId");

                    b.ToTable("MeasurementSign");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementSignAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SignId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MeasurementSignAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementUOM", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("MeasurementUOM");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementUOMAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MeasurementUOMAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrowthPromotionResult")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GrowthPromotionStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Inventory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryAdj")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("LotNumberExpDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerLotNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Notified")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GrowthPromotionStatusId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("Name");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MediaAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrowthPromotionResult")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GrowthPromotionStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Inventory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryAdj")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LotNumber")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LotNumberExpDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerLotNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Notified")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MediaAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarcodeGroup")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BarcodeRegex")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpDateFormat")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpDateGroup")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpDateRegex")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("InventoryControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LotNumGroup")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LotNumRegex")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaNumGroup")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaNumRegex")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductNumGroup")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumRegex")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Description");

                    b.ToTable("MediaType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "No media type",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "No media type",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Surface Plate",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "Surface Plate",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Swab",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "Swab",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Settle Plate",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "Settle Plate",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Vial",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "Vial",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Reagent",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "Reagent",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "R2A",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "R2A",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "TSA",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "TSA",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "TSA RODAC",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "TSA RODAC",
                            NotificationPercentage = 0
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "SDA",
                            InventoryControl = false,
                            IsActive = true,
                            Name = "SDA",
                            NotificationPercentage = 0
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MediaTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarcodeGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("BarcodeRegex")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExpDateFormat")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpDateGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpDateRegex")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InventoryControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LotNumGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("LotNumRegex")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaNumGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaNumRegex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductNumGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumRegex")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("MediaTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MediaV", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrowthPromotionResult")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GrowthPromotionStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrowthPromotionStatusName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Inventory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryAdj")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InventoryControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LotNumber")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LotNumberExpDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerLotNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Notified")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .HasColumnType("TEXT");

                    b.ToView("MediaV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Organism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGramStrain")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismGenusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismSeverityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Strain")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganismGenusId");

                    b.HasIndex("OrganismSeverityId");

                    b.HasIndex("Species");

                    b.ToTable("Organism");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGramStrain")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismGenusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismSeverityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PicturePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .HasColumnType("TEXT");

                    b.Property<string>("Strain")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("OrganismAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismChar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApiCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganismTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrganismTypeId");

                    b.ToTable("OrganismChar");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismCharAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApiCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganismTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("OrganismCharAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismGenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApiCreated")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.HasIndex("OrganismTypeId");

                    b.ToTable("OrganismGenus");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismGenusAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApiCreated")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("OrganismGenusAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("OrganismSeverity");

                    b.HasData(
                        new
                        {
                            Id = 18,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Non-Objectionable",
                            En = "Non-Objectionable",
                            IsActive = true,
                            Zh = "非致病的"
                        },
                        new
                        {
                            Id = 20,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Objectionable",
                            En = "Objectionable",
                            IsActive = true,
                            Zh = "致病的"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismSeverityAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("OrganismSeverityAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("OrganismType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("OrganismTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrgFoundMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("OrgFoundMethod");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrgFoundMethodAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("OrgFoundMethodAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.PersonnelSite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.ToTable("PersonnelSite");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.PersonnelSiteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("PersonnelSiteAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.PreDefinedNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PreDefinedNote");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Message = "该样品为阴性对照",
                            Name = "阴性对照"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Message = "样本并未被检测，因为",
                            Name = "未检测"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Message = "该采样点无法检测，因为",
                            Name = "采样点无法检测"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Message = "正常复核，无额外说明",
                            Name = "复核"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Message = "正常批准，无额外说明",
                            Name = "批准"
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = false
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = false
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = false
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = false
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = false
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.PreDefinedNoteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("PreDefinedNoteAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ChainOfCustody")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("Name");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.ProductAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ChainOfCustody")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ProductAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.RptFrequencySummaryV", b =>
                {
                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviationNumber")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Environment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exception")
                        .HasColumnType("TEXT");

                    b.Property<string>("LimitType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ParticleSize")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformedUsername")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PersonnelSiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonnelUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SampleBarcode")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleCreatedDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SampleYear")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteClassificationDesc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SiteClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestDescription")
                        .HasColumnType("TEXT");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestResult")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TestResultCreatedDate")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TestResultNumber")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("TestTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uom")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Volume")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VolumeUom")
                        .HasColumnType("TEXT");

                    b.ToView("RptFrequencySummaryV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.RptLocPromptComplianceV", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.ToView("RptLocPromptComplianceV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.RptSamplePeriodV", b =>
                {
                    b.Property<string>("PeriodType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SamplePeriod")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SampleYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SampleYearText")
                        .HasColumnType("TEXT");

                    b.ToView("RptSamplePeriodV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SampleV", b =>
                {
                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Breadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompleteDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviationNote")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Environment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InitialQualificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFdcEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNegative")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastMonitoredDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxChildOrgCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementUom")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("NextQualificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentOrgFoundId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentSampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerformedUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonnelEmpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonnelRealName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonnelSiteDescription")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PersonnelSiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonnelUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersonnelUsername")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SamplingCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScheduledStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Vloume")
                        .HasColumnType("INTEGER");

                    b.ToView("SampleV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SeverityLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismSeverityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganismId");

                    b.HasIndex("OrganismSeverityId");

                    b.ToTable("SeverityLocation");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SeverityLocationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismSeverityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SeverityLocationAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Sign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("Sign");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "<",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = ">",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "<=",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = ">=",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "=",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SignAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SignAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SecondClassificationId");

                    b.HasIndex("SiteTypeId");

                    b.HasIndex("IsActive", "LocationId", "Id");

                    b.HasIndex("LocationId", "Id", "Name");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SiteAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("SiteType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SiteTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteV", b =>
                {
                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassificationDesc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationDesc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondClassificationDesc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SecondClassificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteTypeDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.ToView("SiteV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestClassId");

                    b.HasIndex("Description", "Id");

                    b.ToTable("TestCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Surface Bioburden Analysis",
                            En = "Surface Bioburden Analysis",
                            IsActive = true,
                            TestClassId = 1,
                            Zh = "表面微生物检测"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Personnel Bioburden Analysis",
                            En = "Personnel Bioburden Analysis",
                            IsActive = true,
                            TestClassId = 1,
                            Zh = "人员表面微生物检测"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Viable Air Analysis",
                            En = "Viable Air Analysis",
                            IsActive = true,
                            TestClassId = 1,
                            Zh = "空气微生物检测"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Non-Viable Air",
                            En = "Non-Viable Air",
                            IsActive = true,
                            TestClassId = 1,
                            Zh = "尘埃粒子检测"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Water Analysis",
                            En = "Water Analysis",
                            IsActive = true,
                            TestClassId = 2,
                            Zh = "水系统检测"
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Compressed Gas Analysis",
                            En = "Product Bioburden",
                            IsActive = true,
                            TestClassId = 2,
                            Zh = "压缩空气检测"
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Product Bioburden",
                            En = "Product Bioburden",
                            IsActive = true,
                            TestClassId = 3,
                            Zh = "产品生物负载检测"
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Product Sterility",
                            En = "Product Sterility",
                            IsActive = true,
                            TestClassId = 3,
                            Zh = "产品无菌检测"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestCategoryAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestCategoryAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestClass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "EM",
                            En = "EM",
                            IsActive = true,
                            Zh = "环境监测"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Utility",
                            En = "Utility",
                            IsActive = true,
                            Zh = "设施设备"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Product",
                            En = "Product",
                            IsActive = true,
                            Zh = "产品检测"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestClassAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestClassAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoAssignNext")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ESign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ESignVerification")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrintLabels")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequirePerformedUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowAddCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowDeviceControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEnvironment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowIncubationTimes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOrgid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPersonnelPanel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowReadings")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleMedia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleTimes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePreviousResult")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VerifyPrevious")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestStage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AutoAssignNext = true,
                            AutoEndDate = true,
                            AutoStartDate = true,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "SAMPLING",
                            ESign = true,
                            ESignVerification = true,
                            En = "SAMPLING",
                            IsActive = true,
                            LockStartDate = true,
                            PrintLabels = true,
                            RequireEndDate = true,
                            RequirePerformedUser = true,
                            RequireStartDate = true,
                            Sequence = 100,
                            ShowAddCycle = false,
                            ShowDeviceControl = false,
                            ShowEnvironment = false,
                            ShowIncubationTimes = false,
                            ShowOrgid = false,
                            ShowPersonnelPanel = true,
                            ShowReadings = false,
                            ShowSampleMedia = false,
                            ShowSampleTimes = false,
                            UsePreviousResult = false,
                            VerifyPrevious = false,
                            Zh = "采集样本"
                        },
                        new
                        {
                            Id = 2,
                            AutoAssignNext = true,
                            AutoEndDate = false,
                            AutoStartDate = false,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "INCUBATION",
                            ESign = true,
                            ESignVerification = true,
                            En = "INCUBATION",
                            IsActive = true,
                            LockStartDate = false,
                            PrintLabels = false,
                            RequireEndDate = false,
                            RequirePerformedUser = false,
                            RequireStartDate = false,
                            Sequence = 300,
                            ShowAddCycle = false,
                            ShowDeviceControl = false,
                            ShowEnvironment = false,
                            ShowIncubationTimes = false,
                            ShowOrgid = false,
                            ShowPersonnelPanel = false,
                            ShowReadings = false,
                            ShowSampleMedia = false,
                            ShowSampleTimes = false,
                            UsePreviousResult = false,
                            VerifyPrevious = false,
                            Zh = "培养孵育"
                        },
                        new
                        {
                            Id = 3,
                            AutoAssignNext = true,
                            AutoEndDate = false,
                            AutoStartDate = false,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "TESTING",
                            ESign = true,
                            ESignVerification = true,
                            En = "TESTING",
                            IsActive = true,
                            LockStartDate = false,
                            PrintLabels = true,
                            RequireEndDate = false,
                            RequirePerformedUser = false,
                            RequireStartDate = false,
                            Sequence = 200,
                            ShowAddCycle = false,
                            ShowDeviceControl = false,
                            ShowEnvironment = false,
                            ShowIncubationTimes = false,
                            ShowOrgid = false,
                            ShowPersonnelPanel = false,
                            ShowReadings = false,
                            ShowSampleMedia = false,
                            ShowSampleTimes = false,
                            UsePreviousResult = false,
                            VerifyPrevious = false,
                            Zh = "实验操作"
                        },
                        new
                        {
                            Id = 4,
                            AutoAssignNext = true,
                            AutoEndDate = false,
                            AutoStartDate = false,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "RESULTS ENTRY",
                            ESign = true,
                            ESignVerification = true,
                            En = "RESULTS ENTRY",
                            IsActive = true,
                            LockStartDate = false,
                            PrintLabels = false,
                            RequireEndDate = false,
                            RequirePerformedUser = false,
                            RequireStartDate = false,
                            Sequence = 400,
                            ShowAddCycle = true,
                            ShowDeviceControl = true,
                            ShowEnvironment = true,
                            ShowIncubationTimes = true,
                            ShowOrgid = true,
                            ShowPersonnelPanel = true,
                            ShowReadings = true,
                            ShowSampleMedia = true,
                            ShowSampleTimes = true,
                            UsePreviousResult = true,
                            VerifyPrevious = true,
                            Zh = "结果判读"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestStageAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoAssignNext")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ESign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ESignVerification")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrintLabels")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequirePerformedUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowAddCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowDeviceControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEnvironment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowIncubationTimes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOrgid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPersonnelPanel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowReadings")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleMedia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleTimes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePreviousResult")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VerifyPrevious")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestStageAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApproveCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EngineVerion")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedApprove")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedReview")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NegativeControl")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProdSelectionTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireProductSelection")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SystemRecord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTypeCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTypeLabelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WorkflowTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProdSelectionTimeFrameId");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("TestTypeCodeId");

                    b.HasIndex("TestTypeLabelId");

                    b.ToTable("TestType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApproveCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EngineVerion")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedApprove")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NeedReview")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NegativeControl")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProdSelectionTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireProductSelection")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReviewCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SystemRecord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTypeCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTypeLabelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WorkflowTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestTypeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TestTypeCode");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ACTIVEAIR",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Viable Air",
                            Icon = "viableItem",
                            IsActive = true,
                            Name = "Viable Air"
                        },
                        new
                        {
                            Id = 2,
                            Code = "COND",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Conductivity",
                            Icon = "conItem",
                            IsActive = true,
                            Name = "Conductivity"
                        },
                        new
                        {
                            Id = 3,
                            Code = "GOWN",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Personnel",
                            Icon = "personnelItem",
                            IsActive = true,
                            Name = "Personnel"
                        },
                        new
                        {
                            Id = 4,
                            Code = "HM",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Heavy Metal",
                            Icon = "heavyMetalItem",
                            IsActive = true,
                            Name = "Heavy Metal"
                        },
                        new
                        {
                            Id = 5,
                            Code = "LAL",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Endotoxin",
                            Icon = "endotoxinItem",
                            IsActive = true,
                            Name = "Endotoxin"
                        },
                        new
                        {
                            Id = 6,
                            Code = "NIT",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Nitrate",
                            Icon = "heavyMetalItem",
                            IsActive = true,
                            Name = "Nitrate"
                        },
                        new
                        {
                            Id = 7,
                            Code = "NVP",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Non-Viable Air",
                            Icon = "nonViableItem",
                            IsActive = true,
                            Name = "Non-Viable Air"
                        },
                        new
                        {
                            Id = 8,
                            Code = "PERSON",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Personnel",
                            Icon = "personnelItem",
                            IsActive = true,
                            Name = "Personnel"
                        },
                        new
                        {
                            Id = 9,
                            Code = "PH",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "pH",
                            Icon = "heavyMetalItem",
                            IsActive = true,
                            Name = "pH"
                        },
                        new
                        {
                            Id = 10,
                            Code = "PLATE",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Surface Bioburden",
                            Icon = "rodacItem",
                            IsActive = true,
                            Name = "Surface Bioburden"
                        },
                        new
                        {
                            Id = 11,
                            Code = "PLATENEG",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Surface Bioburden",
                            Icon = "rodacItem",
                            IsActive = true,
                            Name = "Surface Bioburden"
                        },
                        new
                        {
                            Id = 12,
                            Code = "PRODBIO",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Product",
                            Icon = "productItem",
                            IsActive = true,
                            Name = "Product"
                        },
                        new
                        {
                            Id = 13,
                            Code = "PRODSTERILE",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Product",
                            Icon = "productItem",
                            IsActive = true,
                            Name = "Product"
                        },
                        new
                        {
                            Id = 14,
                            Code = "SETTLE",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Settle Plate",
                            Icon = "viableItem",
                            IsActive = true,
                            Name = "Settle Plate"
                        },
                        new
                        {
                            Id = 15,
                            Code = "SETTLENEG",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Settle Plate",
                            Icon = "viableItem",
                            IsActive = true,
                            Name = "Settle Plate"
                        },
                        new
                        {
                            Id = 16,
                            Code = "SWAB",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Swab",
                            Icon = "rodacItem",
                            IsActive = true,
                            Name = "Swab"
                        },
                        new
                        {
                            Id = 17,
                            Code = "SWABNEG",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Swab",
                            Icon = "rodacItem",
                            IsActive = true,
                            Name = "Swab"
                        },
                        new
                        {
                            Id = 18,
                            Code = "TDIL",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Utility Bioburden",
                            Icon = "waterItem",
                            IsActive = true,
                            Name = "Utility Bioburden"
                        },
                        new
                        {
                            Id = 19,
                            Code = "TOC",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Utility Bioburden",
                            Icon = "waterItem",
                            IsActive = true,
                            Name = "Utility Bioburden"
                        },
                        new
                        {
                            Id = 20,
                            Code = "UTILBIO",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Utility Bioburden",
                            Icon = "waterItem",
                            IsActive = true,
                            Name = "Utility Bioburden"
                        },
                        new
                        {
                            Id = 21,
                            Code = "ORG",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Org Id",
                            Icon = "rodacItem",
                            IsActive = true,
                            Name = "Org Id"
                        },
                        new
                        {
                            Id = 22,
                            Code = "Compressed Air",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Compressed Air",
                            Icon = "triangleItem",
                            IsActive = true,
                            Name = "Compressed Air"
                        },
                        new
                        {
                            Id = 23,
                            Code = "Nitrogen",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Nitrogen",
                            Icon = "triangleItem",
                            IsActive = true,
                            Name = "Nitrogen"
                        },
                        new
                        {
                            Id = 24,
                            Code = "Oxygen",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Oxygen",
                            Icon = "triangleItem",
                            IsActive = true,
                            Name = "Oxygen"
                        },
                        new
                        {
                            Id = 25,
                            Code = "Carbon Dioxide",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Carbon Dioxide",
                            Icon = "triangleItem",
                            IsActive = true,
                            Name = "Carbon Dioxide"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeCodeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestTypeCodeAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeEquipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredNum")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("TestTypeEquipment");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeEquipmentAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredNum")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestTypeEquipmentAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestTypeLabel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "GENERAL",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "GENERAL",
                            IsActive = true,
                            Sequence = 100,
                            Zh = "常规标签"
                        },
                        new
                        {
                            Id = 2,
                            Code = "PERSONNEL",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "PERSONNEL",
                            IsActive = true,
                            Sequence = 200,
                            Zh = "人员检测标签"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DILUTION",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "DILUTION",
                            IsActive = true,
                            Sequence = 300,
                            Zh = "稀释样本标签"
                        },
                        new
                        {
                            Id = 4,
                            Code = "GROUP",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "GROUP",
                            IsActive = true,
                            Sequence = 400,
                            Zh = "群组标签"
                        },
                        new
                        {
                            Id = 5,
                            Code = "PREBARCODED",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            En = "PREBARCODED",
                            IsActive = true,
                            Sequence = 500,
                            Zh = "使用带条码平皿的标签"
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeLabelAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestTypeLabelAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredNum")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("TestTypeMedia");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeMediaAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredNum")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestTypeMediaAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeV", b =>
                {
                    b.Property<string>("Breadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasResultMeasurement")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasShowOrgId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasSubTestTypes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsSubTestType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LabelCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NegativeControl")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProdSelectionTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireProductSelection")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SystemRecord")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestCategoryDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestClassDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestTypeCodeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeFrameDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.ToView("TestTypeV");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AddOrganism")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoAssignNext")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AutoEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AutoStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("BulkOperation")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClonedTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DockingDeviceData")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ESign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ESignVerification")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("EnvironmentCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExecuteTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ExecuteUserCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("FrontResult")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IncubationEndDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IncubationStartDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("InputByEquipment")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("InputByManual")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MatchingResultsOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCalAlignment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCycles")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MaxTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCalAlignment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCycles")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MinTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextAllocation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlatformType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrintLabels")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Product")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PromptMsg")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ProxyOperation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequirePerformedUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SampleEndDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SampleStartDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowAddCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowDeviceControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEnvironment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowIncubationTimes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOrgid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPersonnelPanel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowReadings")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleMedia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleTimes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestStageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("UpLoadDocuments")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePreviousResult")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VerifyPrevious")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClonedTimeFrameId");

                    b.HasIndex("TestTypeId", "Sequence");

                    b.HasIndex("TestStageId", "TestTypeId", "Sequence", "MinTime", "MaxTime");

                    b.ToTable("TimeFrame");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AddOrganism")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoAssignNext")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AutoEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AutoStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("BulkOperation")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ClonedTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("DockingDeviceData")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ESign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ESignVerification")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("EnvironmentCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExecuteTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("ExecuteUserCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("FrontResult")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IncubationEndDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IncubationStartDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("InputByEquipment")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("InputByManual")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MatchingResultsOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCalAlignment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCycles")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MaxTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCalAlignment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCycles")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MinTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NextAllocation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlatformType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrintLabels")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Product")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PromptMsg")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ProxyOperation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequirePerformedUser")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SampleEndDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SampleStartDateCanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowAddCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowDeviceControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEnvironment")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowIncubationTimes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowOrgid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPersonnelPanel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowReadings")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleMedia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSampleTimes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestStageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("UpLoadDocuments")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePreviousResult")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("VerifyPrevious")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TimeFrameAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameDilution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoFill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayText")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ListValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("TimeFrameId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("TimeFrameDilution");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameDilutionAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoFill")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayText")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ListValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Selected")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TimeFrameDilutionAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionType")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NextTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LimitDefId");

                    b.HasIndex("NextTimeFrameId");

                    b.HasIndex("TimeFrameId");

                    b.ToTable("TimeFrameEvent");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameEventAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionType")
                        .HasColumnType("TEXT");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NextTimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TimeFrameEventAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Description");

                    b.ToTable("UnitOfMeasure");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfm",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/ft^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "ppm",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "0.5 cfm Count",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/m^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "µS/cm",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "pH",
                            IsActive = true
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu",
                            IsActive = true
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/25cm^2",
                            IsActive = true
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "m^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 11,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "ft^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 12,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "EU/mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 13,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "ppb",
                            IsActive = true
                        },
                        new
                        {
                            Id = 14,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 15,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/100mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 16,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "fpm",
                            IsActive = true
                        },
                        new
                        {
                            Id = 17,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "ft^2",
                            IsActive = true
                        },
                        new
                        {
                            Id = 18,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "ft^3/minute",
                            IsActive = true
                        },
                        new
                        {
                            Id = 19,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "m^3/minute",
                            IsActive = true
                        },
                        new
                        {
                            Id = 20,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "minutes",
                            IsActive = true
                        },
                        new
                        {
                            Id = 21,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "seconds",
                            IsActive = true
                        },
                        new
                        {
                            Id = 22,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "hours",
                            IsActive = true
                        },
                        new
                        {
                            Id = 23,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 24,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "°C",
                            IsActive = true
                        },
                        new
                        {
                            Id = 25,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "µg/L",
                            IsActive = true
                        },
                        new
                        {
                            Id = 26,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "%",
                            IsActive = true
                        },
                        new
                        {
                            Id = 27,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/200mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 28,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "mg/m^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 29,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "value",
                            IsActive = true
                        },
                        new
                        {
                            Id = 30,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "100mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 31,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "200mL",
                            IsActive = true
                        },
                        new
                        {
                            Id = 32,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "particles/ft^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 33,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "cfu/plate",
                            IsActive = true
                        },
                        new
                        {
                            Id = 34,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "µ/ft^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 35,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "0.5 µ particles",
                            IsActive = true
                        },
                        new
                        {
                            Id = 36,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "5.0 µ particles",
                            IsActive = true
                        },
                        new
                        {
                            Id = 37,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "drops",
                            IsActive = true
                        },
                        new
                        {
                            Id = 38,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "L",
                            IsActive = true
                        },
                        new
                        {
                            Id = 39,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "0.5 µ/m^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 40,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "5.0 µ/m^3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 41,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "CFU/4h",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.UnitOfMeasureAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UnitOfMeasureAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagramAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("VisioDiagramAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("VisioDiagramId");

                    b.ToTable("VisioLocation");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioLocationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("VisioLocationAudit");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("VisioDiagramId");

                    b.ToTable("VisioSite");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioSiteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisioDiagramId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("VisioSiteAudit");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHtmlBody")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SendDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EMail");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMailAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentId")
                        .HasColumnType("TEXT");

                    b.Property<long>("EMailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsedInBody")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EMailId");

                    b.ToTable("EMailAttachment");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NotificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviationId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MediaId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("SampleId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NotificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("NotificationAudit");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationEMail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EMailId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NotificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EMailId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationEMail");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessorType")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZhDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZhName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Excursion",
                            EnDescription = "Excursion",
                            EnName = "Excursion",
                            IsActive = true,
                            Name = "Excursion",
                            Type = 1,
                            ZhDescription = "触发限度时发送通知",
                            ZhName = "超限"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Login Failure",
                            EnDescription = "Login Failure",
                            EnName = "Login Failure",
                            IsActive = true,
                            Name = "Login Failure",
                            Type = 2,
                            ZhDescription = "登录失败",
                            ZhName = "登录失败"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Invalid electronic signature was attempted.",
                            EnDescription = "Invalid electronic signature was attempted.",
                            EnName = "Invalid ESig",
                            IsActive = true,
                            Name = "Invalid ESig",
                            Type = 3,
                            ZhDescription = "无效电子签名",
                            ZhName = "无效电子签名"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "A user account was locked.",
                            EnDescription = "A user account was locked.",
                            EnName = "Account Locked",
                            IsActive = true,
                            Name = "Account Locked",
                            Type = 4,
                            ZhDescription = "账户锁定",
                            ZhName = "账户锁定"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Work items in their first stage that have been scheduled but are not yet assigned.",
                            EnDescription = "Work items in their first stage that have been scheduled but are not yet assigned.",
                            EnName = "Scheduled Samples Not Assigned",
                            IsActive = true,
                            Name = "Scheduled Samples Not Assigned",
                            Type = 5,
                            ZhDescription = "任务项目已经添加进检验池如未被分配和领取，则在每日下午3点发送通知",
                            ZhName = "任务未启动"
                        },
                        new
                        {
                            Id = 6,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "The weekly test has not been completed.",
                            EnDescription = "The weekly test has not been completed.",
                            EnName = "Weekly Incomplete",
                            IsActive = true,
                            Name = "Weekly Incomplete",
                            Type = 6,
                            ZhDescription = "测试频率为每周的检验项目如果在周五还未完成，将会在下午3点发送通知",
                            ZhName = "周任务未完成"
                        },
                        new
                        {
                            Id = 7,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "The monthly test has not been completed.",
                            EnDescription = "The monthly test has not been completed.",
                            EnName = "Monthly Incomplete",
                            IsActive = true,
                            Name = "Monthly Incomplete",
                            Type = 7,
                            ZhDescription = "测试频率为每月的检验项目如果在当月25号还未完成，将会在下午3点发送通知",
                            ZhName = "月任务未完成"
                        },
                        new
                        {
                            Id = 8,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "The quarterly test has not been completed.",
                            IsActive = false,
                            Name = "Quarterly Incomplete",
                            Type = 8
                        },
                        new
                        {
                            Id = 9,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Work items with a configured max time for a stage that are due within the next hour.",
                            IsActive = false,
                            Name = "Max Time About to Exceed",
                            Type = 9
                        },
                        new
                        {
                            Id = 10,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Work items that have been assigned and scheduled for today but have not yet been completed.",
                            EnDescription = "Work items that have been assigned and scheduled for today but have not yet been completed.",
                            EnName = "Work Incomplete ",
                            IsActive = true,
                            Name = "Work Incomplete ",
                            Type = 10,
                            ZhDescription = "计划检测日期为当天的任务，如已经启动但未完成的，在当天下午3点发送通知",
                            ZhName = "当日任务未完成"
                        },
                        new
                        {
                            Id = 11,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Organism Found",
                            IsActive = false,
                            Name = "Organism Found",
                            Type = 11
                        },
                        new
                        {
                            Id = 12,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Organism Added To Organism Dictionary",
                            IsActive = false,
                            Name = "Organism Added To Organism Dictionary",
                            Type = 12
                        },
                        new
                        {
                            Id = 13,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "An error occurred processing a sample",
                            IsActive = false,
                            Name = "Workflow Error",
                            Type = 13
                        },
                        new
                        {
                            Id = 14,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Equipment that is about to go out of calibration.",
                            IsActive = false,
                            Name = "Equipment About to Expire",
                            Type = 14
                        },
                        new
                        {
                            Id = 15,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "Media inventory is getting low.",
                            IsActive = false,
                            Name = "Media Inventory is Low",
                            Type = 15
                        },
                        new
                        {
                            Id = 16,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "User Qualification has lapsed.",
                            IsActive = false,
                            Name = "User Qualification Lapsed",
                            Type = 16
                        },
                        new
                        {
                            Id = 17,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            Description = "User Qualification is coming due.",
                            IsActive = false,
                            Name = "User Qualification Coming Due",
                            Type = 17
                        });
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnName")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcessorType")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZhDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZhName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("NotificationTypeAudit");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationV", b =>
                {
                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquipmentLocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EquipmentLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaLocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NotificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationTypeDesc")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationTypeName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteDesc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteLocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SiteLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserLocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserLocationId")
                        .HasColumnType("INTEGER");

                    b.ToView("NotificationV");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("ESys.Notification.Entity.SubscriptionAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SubscriptionAudit");
                });

            modelBuilder.Entity("ESys.Notification.Entity.SubscriptionV", b =>
                {
                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsLocationActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsNotificationTypeActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationTypeName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RealName")
                        .HasColumnType("TEXT");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserLocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserStatus")
                        .HasColumnType("INTEGER");

                    b.ToView("SubscriptionV");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Batch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchLotNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.BatchAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchLotNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("BatchAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.CurrentWorkSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BatchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CompletedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EarlyExecutionDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExecuteUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IneffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastEsigUserName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastStepRemark")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoTestReason")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NoTestUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NotificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentCurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecieveDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RemainingMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplicateNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplicateReason")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ScheduledDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestStageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WorkflowCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WorkflowCompletedDate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ExecuteUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("NoTestUserId");

                    b.HasIndex("ParentCurrentWorkSpaceId");

                    b.HasIndex("PerformedUserId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SampleId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestStageId");

                    b.HasIndex("TimeFrameId");

                    b.HasIndex("UserId");

                    b.ToTable("CurrentWorkSpace");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.CurrentWorkSpaceAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BatchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CompletedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EarlyExecutionDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExecuteUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IneffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastEsigUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastStepRemark")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoTestReason")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NoTestUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NotificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentCurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecieveDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RemainingMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplicateNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplicateReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleBarcode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ScheduledDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestStageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WorkflowCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WorkflowCompletedDate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("CurrentWorkSpaceAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Deviation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviationNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ReadingValue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueDescription")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("LimitId");

                    b.HasIndex("LimitTypeId");

                    b.HasIndex("SampleId");

                    b.HasIndex("TestId");

                    b.ToTable("Deviation");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.DeviationAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviationNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ReadingValue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueDescription")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DeviationAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.FileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("SampleId");

                    b.ToTable("FileAttachment");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.FileAttachmentAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("FileAttachmentAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.GeneralPoolV", b =>
                {
                    b.Property<int?>("BatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchLotNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasExceededLimits")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IneffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleLate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSamplingStage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastEsigUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationBarcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxCalAlignment")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("NegativeControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentCurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerformedUsername")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonnelSiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonnelUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersonnelUsername")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PlanApproved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlanApprovedDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanBarcode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PlanCompletedDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanDescription")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PlanEffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PlanEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlanIneffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlanVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReplicateNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplicateReason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SampleApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SampleBarcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleDeviationNote")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleEndDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SamplePerformedUsername")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SampleUOM")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SampleVolume")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScheduledDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteBarcode")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestCategoryDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestClassDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestEnvironment")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestFrequencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestStageDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestStageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeFrameDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeFrameSequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("VerifyPrevious")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WorkflowCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("WorkflowCompletedDate")
                        .HasColumnType("INTEGER");

                    b.ToView("GeneralPoolV");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.GroupAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("GroupAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Limit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountTowardFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deviation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EmailNotify")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExecutePerCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitExceededId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PeriodCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Prevalence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportableOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReportableValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RescheduleCount")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("RescheduleOffset")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResetFreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ScreenNotify")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SourceLimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceLimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LimitDefId");

                    b.HasIndex("LimitExceededId");

                    b.HasIndex("LimitTypeId");

                    b.HasIndex("ParentLimitId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SourceLimitDefId");

                    b.HasIndex("SourceLimitTypeId");

                    b.HasIndex("TestId");

                    b.HasIndex("Id", "LimitTypeId");

                    b.ToTable("Limit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.LimitAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountTowardFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deviation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EmailNotify")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExecutePerCycle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitExceededId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OccurrenceCount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Period")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PeriodCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Prevalence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReportableOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ReportableValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RescheduleCount")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("RescheduleOffset")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ResetFreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ScreenNotify")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SourceLimitDefId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceLimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.LimitExceeded", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountTowardFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FrequencyLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ResetFreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyLimitId");

                    b.HasIndex("LimitId");

                    b.HasIndex("LimitTypeId");

                    b.HasIndex("SampleId");

                    b.ToTable("LimitExceeded");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.LimitExceededAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountTowardFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FrequencyLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LimitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LimitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reschedule")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ResetFreqLimit")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("LimitExceededAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.NotificationFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NotificationFrequency");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "No frequency",
                            IsActive = true
                        },
                        new
                        {
                            Id = 200,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Default",
                            IsActive = true
                        },
                        new
                        {
                            Id = 201,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Daily",
                            IsActive = true
                        },
                        new
                        {
                            Id = 202,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Weekly",
                            IsActive = true
                        },
                        new
                        {
                            Id = 203,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Monthly",
                            IsActive = true
                        },
                        new
                        {
                            Id = 204,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Quarterly",
                            IsActive = true
                        },
                        new
                        {
                            Id = 205,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Annually",
                            IsActive = true
                        },
                        new
                        {
                            Id = 206,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "By Lot/Batch",
                            IsActive = true
                        },
                        new
                        {
                            Id = 207,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Semi Annually",
                            IsActive = true
                        },
                        new
                        {
                            Id = 208,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "On Demand",
                            IsActive = true
                        },
                        new
                        {
                            Id = 209,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Validation",
                            IsActive = true
                        },
                        new
                        {
                            Id = 210,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Hourly",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ESys.Schedule.Entity.NotificationFrequencyAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("NotificationFrequencyAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ParticleCounterData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("FlowRate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MatchedDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleDate")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("SampleDuration")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM03")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM05")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM10")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM100")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM20")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM30")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM40")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM50")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SampleId");

                    b.HasIndex("SiteId");

                    b.ToTable("ParticleCounterData");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ParticleCounterDataAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DataId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("FlowRate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MatchedDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomName")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleDate")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("SampleDuration")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM03")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM05")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM10")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM100")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM20")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM30")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM40")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UM50")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ParticleCounterDataAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoFillFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AutoRetiredDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompletedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("EffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillDayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillDayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FillEffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillHoursOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillMinutesOfHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstDayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IneffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRepeatFill")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastFillDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkWeek")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AutoFillFrequencyTypeId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlanGroupId");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.PlanAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovedDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoFillFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AutoRetiredDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompletedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillDayOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillDayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FillEffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillHoursOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillLength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillMinutesOfHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FillTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstDayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("IneffectiveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRepeatFill")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastFillDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlanGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkWeek")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("PlanAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.PlanGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeHistory")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlanGroup");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.PlanGroupAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeHistory")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("PlanGroupAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CycleNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Formula")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentSampleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ParticleSize")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PerformUserName")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReadingDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SignId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("OrganismId");

                    b.HasIndex("ParentSampleId");

                    b.HasIndex("SampleId");

                    b.HasIndex("SignId");

                    b.HasIndex("TestId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Reading");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ReadingAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CycleNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Formula")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganismId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentSampleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ParticleSize")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PerformUserName")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReadingDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SignId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitOfMeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ReadingAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ResultEntry.CompareDataRemark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParticleCounterDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<long>("RemarkDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParticleCounterDataId");

                    b.HasIndex("UserId");

                    b.ToTable("CompareDataRemark");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ResultEntry.CompareDataRemarkAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParticleCounterDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.Property<long>("RemarkDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("CompareDataRemarkAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.RptSampleMart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActionLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ActionLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<long?>("AlertLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlertLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AlertLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ApproveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Batch1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Batch2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CSign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompleteDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationIdBreadCrumb")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LowActionLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LowActionLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LowActionLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<long?>("LowAlertLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LowAlertLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LowAlertLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("MostServerDeviation")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MostServerDeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MostServerLimit")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MostServerLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organism1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organism2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ParticleSize")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonnelSiteCode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Product1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Product2")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading1Cycle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading1Desc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading1Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reading1Sign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading1Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading1UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading1Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading2Cycle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading2Desc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading2Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reading2Sign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading2Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading2UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading2Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading3Cycle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading3Desc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading3Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reading3Sign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading3Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading3UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading3Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReadingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultsEnteredEmpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultsEnteredFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultsEnteredLastName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ResultsEnteredUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultsEnteredUserName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Reviewed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReviewedDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TestResultNumberValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("TestResultValue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UOM")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UpdateDate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("SiteId");

                    b.ToTable("RptSampleMart");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.RptSampleMartAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActionLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ActionLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<long?>("AlertLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlertLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AlertLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<long?>("ApproveDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Batch1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Batch2")
                        .HasColumnType("TEXT");

                    b.Property<string>("CSign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompleteDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationIdBreadCrumb")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LowActionLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LowActionLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LowActionLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<long?>("LowAlertLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LowAlertLimitOperator")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LowAlertLimitValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("MostServerDeviation")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MostServerDeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MostServerLimit")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MostServerLimitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organism1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Organism2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ParticleSize")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonnelSiteCode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Product1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Product2")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading1Cycle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading1Desc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading1Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reading1Sign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading1Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading1UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading1Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading2Cycle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading2Desc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading2Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reading2Sign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading2Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading2UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading2Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading3Cycle")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading3Desc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Reading3Seq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reading3Sign")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading3Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reading3UOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Reading3Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReadingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultsEnteredEmpId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultsEnteredFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultsEnteredLastName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ResultsEnteredUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultsEnteredUserName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Reviewed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReviewedDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SiteName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("TestResultNumberValue")
                        .HasPrecision(20, 6)
                        .HasColumnType("TEXT");

                    b.Property<string>("TestResultValue")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UOM")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UpdateDate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("RptSampleMartAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Sample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompleteDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviationNote")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFdcEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNegative")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementUOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentOrgFoundId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentSampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PersonnelSiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonnelUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductNote")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ReApprove")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReApproveDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReApproveUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReviewedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReviewedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SamplingCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScheduledStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Vloume")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowInstanceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("DeviationId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MediaId");

                    b.HasIndex("ParentSampleId");

                    b.HasIndex("PerformedUserId");

                    b.HasIndex("PersonnelSiteId");

                    b.HasIndex("PersonnelUserId");

                    b.HasIndex("TestId");

                    b.HasIndex("Id", "ParentSampleId");

                    b.ToTable("Sample");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.SampleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ApprovedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BarCode")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CompleteDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviationNote")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EndDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEmEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFdcEdit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNegative")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementUOM")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoTest")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentOrgFoundId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentSampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PerformedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PersonnelSiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonnelUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductNote")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ReApprove")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReApproveDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReApproveUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReviewedDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReviewedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SamplingCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScheduledStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("StartDate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Vloume")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowInstanceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SampleAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.SampleReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("UserId");

                    b.ToTable("SampleReview");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.SampleReviewAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SampleReviewAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TableNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EnteryDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TableId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TableNote");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TableNoteAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EnteryDate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TableId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TableNoteAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinutesOfHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthsOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NegativeControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotTest")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotificationFrequencyId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentTestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Randomize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduleOffset")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScheduleStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SequenceAdvice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyOccurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NotificationFrequencyId");

                    b.HasIndex("ParentTestId");

                    b.HasIndex("PlanId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TestFrequencyId");

                    b.HasIndex("TestFrequencyOccurrenceId");

                    b.HasIndex("TestFrequencyTypeId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("TimeFrameDilutionId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinutesOfHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthsOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NegativeControl")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NotTest")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotificationFrequencyId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentTestId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlanId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Randomize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduleOffset")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ScheduleStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SequenceAdvice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyOccurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeFrameDilutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("HoursOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinutesOfHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthsOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Randomize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduleOffset")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ScheduleStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyOccurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TestFrequencyOccurrenceId");

                    b.HasIndex("TestFrequencyTypeId");

                    b.ToTable("TestFrequency");

                    b.HasData(
                        new
                        {
                            Id = 280,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 0,
                            Description = "On Demand",
                            HoursOfDay = 0,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 100
                        },
                        new
                        {
                            Id = 281,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 127,
                            Description = "Hourly",
                            HoursOfDay = 16777215,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 1
                        },
                        new
                        {
                            Id = 282,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 127,
                            Description = "Daily",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 2
                        },
                        new
                        {
                            Id = 283,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 62,
                            Description = "Daily - Work Week",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 2
                        },
                        new
                        {
                            Id = 284,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 8,
                            Description = "Weekly",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 3
                        },
                        new
                        {
                            Id = 285,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 32,
                            Description = "Monthly",
                            HoursOfDay = 1048576,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyOccurrenceId = 3,
                            TestFrequencyTypeId = 4
                        },
                        new
                        {
                            Id = 287,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 2,
                            Description = "Weekly - Monday",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 3
                        },
                        new
                        {
                            Id = 288,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 4,
                            Description = "Weekly - Tuesday",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 3
                        },
                        new
                        {
                            Id = 289,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 8,
                            Description = "Weekly - Wednesday",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 3
                        },
                        new
                        {
                            Id = 290,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 16,
                            Description = "Weekly - Thursday",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 3
                        },
                        new
                        {
                            Id = 291,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 0,
                            DaysOfWeek = 32,
                            Description = "Weekly - Friday",
                            HoursOfDay = 4096,
                            Interval = 1,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 3
                        },
                        new
                        {
                            Id = 292,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            DaysOfMonth = 1,
                            DaysOfWeek = 0,
                            Description = "Quarterly",
                            HoursOfDay = 1,
                            Interval = 3,
                            IsActive = true,
                            MinutesOfHour = 0,
                            MonthsOfYear = 0,
                            Randomize = false,
                            ScheduleOffset = 0,
                            ScheduleStartDate = 0L,
                            TestFrequencyTypeId = 4
                        });
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequencyAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DaysOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HoursOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinutesOfHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthsOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Randomize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduleOffset")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ScheduleStartDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestFrequencyOccurrenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestFrequencyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestFrequencyAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequencyOccurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestFrequencyOccurrence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "First",
                            En = "First",
                            IsActive = true,
                            Name = "First",
                            Zh = "第一个"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Second",
                            En = "Second",
                            IsActive = true,
                            Name = "Second",
                            Zh = "第二个"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Third",
                            En = "Third",
                            IsActive = true,
                            Name = "Third",
                            Zh = "第三个"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Fourth",
                            En = "Fourth",
                            IsActive = true,
                            Name = "Fourth",
                            Zh = "第四个"
                        },
                        new
                        {
                            Id = 5,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Last",
                            En = "Last",
                            IsActive = true,
                            Name = "Last",
                            Zh = "最后一个"
                        });
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequencyOccurrenceAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestFrequencyOccurrenceAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestFrequencyType");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "None",
                            En = "None",
                            IsActive = true,
                            Name = "None",
                            Zh = "无"
                        },
                        new
                        {
                            Id = 1,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Hourly",
                            En = "Hourly",
                            IsActive = true,
                            Name = "Hourly",
                            Zh = "每小时"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Daily",
                            En = "Daily",
                            IsActive = true,
                            Name = "Daily",
                            Zh = "每天"
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Weekly",
                            En = "Weekly",
                            IsActive = true,
                            Name = "Weekly",
                            Zh = "每周"
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 2,
                            CreatedTime = 1306144604160000480L,
                            Description = "Monthly",
                            En = "Monthly",
                            IsActive = true,
                            Name = "Monthly",
                            Zh = "每月"
                        });
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequencyTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("En")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zh")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("TestFrequencyTypeAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceCache", b =>
                {
                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestStageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SampleId");

                    b.HasIndex("TestId");

                    b.ToTable("WorkSpaceCache");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("WorkSpaceEquipment");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceEquipmentAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("WorkSpaceEquipmentAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("MediaId");

                    b.ToTable("WorkSpaceMedia");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceMediaAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("WorkSpaceMediaAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceOrganism", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganismId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("OrganismId");

                    b.HasIndex("SampleId");

                    b.ToTable("WorkSpaceOrganism");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceOrganismAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganismId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("WorkSpaceOrganismAudit");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceProduct", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatchRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CurrentWorkSpaceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SampleId");

                    b.ToTable("WorkSpaceProduct");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceProductAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BatchRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CurrentWorkSpaceId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SampleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("WorkSpaceProductAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ESys.Security.Entity.DepartmentAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DepartmentAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSystemOperation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RealName")
                        .HasColumnType("TEXT");

                    b.Property<long>("SignDate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ElectronicSignature");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignatureItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ElectronicSignatureId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastAuditKey")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PrimaryKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicSignatureId");

                    b.HasIndex("TableName", "PrimaryKey");

                    b.ToTable("ElectronicSignatureItem");
                });

            modelBuilder.Entity("ESys.Security.Entity.ESignConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permissions")
                        .HasColumnType("TEXT");

                    b.Property<int>("SignCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Category", "IsActive");

                    b.ToTable("ESignConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "plan",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Add,Plan:Edit",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "addPlan",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Add",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Category = "editPlan",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Edit",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Category = "planReview",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Review",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 5,
                            Category = "planApprove",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Approve",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 6,
                            Category = "planEffective",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Effective",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 7,
                            Category = "planRetire",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:Retire",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 8,
                            Category = "planAddToPool",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Plan:AddToPool",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 9,
                            Category = "receiveTask",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Missions:Receive",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 10,
                            Category = "assignTask",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "MissionManagement:Assign",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 11,
                            Category = "executeTask",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "Missions:Execute",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 12,
                            Category = "returnTask",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "MissionManagement:Return,MyMissions:Return",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 13,
                            Category = "eSignTasks",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "MyMissions:Execute,SampleCollection:Execute,ExperimentalOperations:Execute,Incubation:Execute,InspectionRecord:Execute",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 14,
                            Category = "noTest",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "MissionManagement:NoTest,MyMissions:NoTest,SampleCollection:NoTest,ExperimentalOperations:NoTest,Incubation:NoTest,InspectionRecord:NoTest",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 15,
                            Category = "reTest",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "MissionManagement:Resume",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 16,
                            Category = "auditReview",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "SampleAudit:Review",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 17,
                            Category = "auditApprove",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "SamplePrompt:Approval",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 18,
                            Category = "auditReApprove",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "SampleCompleted:ReApprove",
                            SignCount = 0
                        },
                        new
                        {
                            Id = 19,
                            Category = "auditEdit",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            Permissions = "MissionManagement:Edit,SampleAudit:Edit",
                            SignCount = 0
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.ESignConfigAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permissions")
                        .HasColumnType("TEXT");

                    b.Property<int>("SignCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ESignConfigAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("ESys.Security.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartFormatter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ParentId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "system",
                            Description = "系统管理",
                            Order = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "region",
                            Description = "区域",
                            Order = 2,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "Classification:Add",
                            Description = "添加洁净级别",
                            Order = 3,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = "Classification:Edit",
                            Description = "编辑洁净级别",
                            Order = 4,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 5,
                            Code = "Classification:Disable",
                            Description = "禁用洁净级别",
                            Order = 5,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Code = "SiteType:Add",
                            Description = "添加采样点类型",
                            Order = 6,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 7,
                            Code = "SiteType:Edit",
                            Description = "编辑采样点类型",
                            Order = 7,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 8,
                            Code = "SiteType:Disable",
                            Description = "禁用采样点类型",
                            Order = 8,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Code = "LocationType:Add",
                            Description = "添加区域类型",
                            Order = 9,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Code = "LocationType:Edit",
                            Description = "编辑区域类型",
                            Order = 10,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 11,
                            Code = "LocationType:Disable",
                            Description = "禁用区域类型",
                            Order = 11,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 12,
                            Code = "Location:Add",
                            Description = "添加区域",
                            Order = 12,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 13,
                            Code = "Location:Edit",
                            Description = "编辑区域",
                            Order = 13,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 14,
                            Code = "Location:Disable",
                            Description = "禁用区域",
                            Order = 14,
                            ParentId = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            Code = "production",
                            Description = "产品",
                            Order = 15,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 16,
                            Code = "Product:Add",
                            Description = "添加产品",
                            Order = 16,
                            ParentId = 15,
                            Type = 2
                        },
                        new
                        {
                            Id = 17,
                            Code = "Product:Edit",
                            Description = "编辑产品",
                            Order = 17,
                            ParentId = 15,
                            Type = 2
                        },
                        new
                        {
                            Id = 18,
                            Code = "Product:Disable",
                            Description = "禁用产品",
                            Order = 18,
                            ParentId = 15,
                            Type = 2
                        },
                        new
                        {
                            Id = 19,
                            Code = "testMethod",
                            Description = "测试方法",
                            Order = 19,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 20,
                            Code = "TestMethod:Add",
                            Description = "添加测试方法",
                            Order = 20,
                            ParentId = 19,
                            Type = 2
                        },
                        new
                        {
                            Id = 21,
                            Code = "TestMethod:Edit",
                            Description = "编辑测试方法",
                            Order = 21,
                            ParentId = 19,
                            Type = 2
                        },
                        new
                        {
                            Id = 22,
                            Code = "TestMethod:Disable",
                            Description = "禁用测试方法",
                            Order = 22,
                            ParentId = 19,
                            Type = 2
                        },
                        new
                        {
                            Id = 23,
                            Code = "device",
                            Description = "设备",
                            Order = 23,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            Code = "Equipment:Add",
                            Description = "添加设备",
                            Order = 24,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            Code = "Equipment:Edit",
                            Description = "编辑设备",
                            Order = 25,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 26,
                            Code = "Equipment:Disable",
                            Description = "禁用设备",
                            Order = 26,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 27,
                            Code = "Equipment:UpdateConfig",
                            Description = "上传文件",
                            Order = 27,
                            ParentId = 23,
                            Type = 2
                        },
                        new
                        {
                            Id = 28,
                            Code = "medium",
                            Description = "培养基",
                            Order = 28,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 29,
                            Code = "Media:Add",
                            Description = "添加培养基",
                            Order = 29,
                            ParentId = 28,
                            Type = 2
                        },
                        new
                        {
                            Id = 30,
                            Code = "Media:Edit",
                            Description = "编辑培养基",
                            Order = 30,
                            ParentId = 28,
                            Type = 2
                        },
                        new
                        {
                            Id = 31,
                            Code = "Media:Disable",
                            Description = "禁用培养基",
                            Order = 31,
                            ParentId = 28,
                            Type = 2
                        },
                        new
                        {
                            Id = 32,
                            Code = "microorganism",
                            Description = "微生物",
                            Order = 32,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 33,
                            Code = "Organism:Add",
                            Description = "添加微生物",
                            Order = 33,
                            ParentId = 32,
                            Type = 2
                        },
                        new
                        {
                            Id = 34,
                            Code = "Organism:Edit",
                            Description = "编辑微生物",
                            Order = 34,
                            ParentId = 32,
                            Type = 2
                        },
                        new
                        {
                            Id = 35,
                            Code = "Organism:Disable",
                            Description = "禁用微生物",
                            Order = 35,
                            ParentId = 32,
                            Type = 2
                        },
                        new
                        {
                            Id = 36,
                            Code = "security",
                            Description = "安全",
                            Order = 36,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 37,
                            Code = "department",
                            Description = "部门管理",
                            Order = 37,
                            ParentId = 36,
                            Type = 1
                        },
                        new
                        {
                            Id = 38,
                            Code = "Department:Add",
                            Description = "添加部门",
                            Order = 38,
                            ParentId = 37,
                            Type = 2
                        },
                        new
                        {
                            Id = 39,
                            Code = "Department:Edit",
                            Description = "编辑部门",
                            Order = 39,
                            ParentId = 37,
                            Type = 2
                        },
                        new
                        {
                            Id = 40,
                            Code = "Department:Disable",
                            Description = "禁用部门",
                            Order = 40,
                            ParentId = 37,
                            Type = 2
                        },
                        new
                        {
                            Id = 41,
                            Code = "user",
                            Description = "用户管理",
                            Order = 41,
                            ParentId = 36,
                            Type = 1
                        },
                        new
                        {
                            Id = 42,
                            Code = "User:Add",
                            Description = "添加用户",
                            Order = 42,
                            ParentId = 41,
                            Type = 2
                        },
                        new
                        {
                            Id = 43,
                            Code = "User:Edit",
                            Description = "编辑用户",
                            Order = 43,
                            ParentId = 41,
                            Type = 2
                        },
                        new
                        {
                            Id = 44,
                            Code = "User:Disable",
                            Description = "禁用用户",
                            Order = 44,
                            ParentId = 41,
                            Type = 2
                        },
                        new
                        {
                            Id = 45,
                            Code = "User:Password",
                            Description = "修改密码",
                            Order = 45,
                            ParentId = 41,
                            Type = 2
                        },
                        new
                        {
                            Id = 46,
                            Code = "role",
                            Description = "角色管理",
                            Order = 46,
                            ParentId = 36,
                            Type = 1
                        },
                        new
                        {
                            Id = 47,
                            Code = "Role:Add",
                            Description = "添加角色",
                            Order = 47,
                            ParentId = 46,
                            Type = 2
                        },
                        new
                        {
                            Id = 48,
                            Code = "Role:Edit",
                            Description = "编辑角色",
                            Order = 48,
                            ParentId = 46,
                            Type = 2
                        },
                        new
                        {
                            Id = 49,
                            Code = "Role:Disable",
                            Description = "禁用角色",
                            Order = 49,
                            ParentId = 46,
                            Type = 2
                        },
                        new
                        {
                            Id = 50,
                            Code = "booking",
                            Description = "预订管理",
                            Order = 50,
                            ParentId = 36,
                            Type = 1
                        },
                        new
                        {
                            Id = 51,
                            Code = "Subscription:Edit",
                            Description = "编辑警告订阅",
                            Order = 51,
                            ParentId = 50,
                            Type = 2
                        },
                        new
                        {
                            Id = 52,
                            Code = "Subscription:Disable",
                            Description = "禁用警告订阅",
                            Order = 52,
                            ParentId = 50,
                            Type = 2
                        },
                        new
                        {
                            Id = 53,
                            Code = "settings",
                            Description = "系统设置",
                            Order = 53,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 54,
                            Code = "Security:Password",
                            Description = "配置密码",
                            Order = 54,
                            ParentId = 53,
                            Type = 1
                        },
                        new
                        {
                            Id = 55,
                            Code = "Security:Email",
                            Description = "配置邮箱",
                            Order = 55,
                            ParentId = 53,
                            Type = 1
                        },
                        new
                        {
                            Id = 56,
                            Code = "auditRecord",
                            Description = "审计追踪",
                            Order = 56,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 57,
                            Code = "log",
                            Description = "日志",
                            Order = 57,
                            ParentId = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 58,
                            Code = "visualization",
                            Description = "可视化",
                            Order = 58,
                            Type = 1
                        },
                        new
                        {
                            Id = 59,
                            Code = "map",
                            Description = "地图管理",
                            Order = 59,
                            ParentId = 58,
                            Type = 1
                        },
                        new
                        {
                            Id = 60,
                            Code = "Map:Add",
                            Description = "添加地图",
                            Order = 60,
                            ParentId = 59,
                            Type = 2
                        },
                        new
                        {
                            Id = 61,
                            Code = "Map:Disable",
                            Description = "禁用地图",
                            Order = 61,
                            ParentId = 59,
                            Type = 2
                        },
                        new
                        {
                            Id = 62,
                            Code = "Map:Edit",
                            Description = "编辑地图",
                            Order = 62,
                            ParentId = 59,
                            Type = 2
                        },
                        new
                        {
                            Id = 63,
                            Code = "MapCategory:Add",
                            Description = "添加地图分类",
                            Order = 63,
                            ParentId = 59,
                            Type = 2
                        },
                        new
                        {
                            Id = 64,
                            Code = "MapCategory:Disable",
                            Description = "禁用地图分类",
                            Order = 64,
                            ParentId = 59,
                            Type = 2
                        },
                        new
                        {
                            Id = 65,
                            Code = "MapCategory:Edit",
                            Description = "编辑地图分类",
                            Order = 65,
                            ParentId = 59,
                            Type = 2
                        },
                        new
                        {
                            Id = 66,
                            Code = "visualizations",
                            Description = "可视化呈现",
                            Order = 66,
                            ParentId = 58,
                            Type = 1
                        },
                        new
                        {
                            Id = 67,
                            Code = "inspectionExecution",
                            Description = "检验执行",
                            Order = 67,
                            Type = 1
                        },
                        new
                        {
                            Id = 68,
                            Code = "missions",
                            Description = "任务管理",
                            Order = 68,
                            ParentId = 67,
                            Type = 1
                        },
                        new
                        {
                            Id = 69,
                            Code = "Missions:Receive",
                            Description = "任务管理领取",
                            Order = 69,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 70,
                            Code = "Missions:Assign",
                            Description = "任务管理分配",
                            Order = 70,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 71,
                            Code = "Missions:Copy",
                            Description = "任务管理复制",
                            Order = 71,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 72,
                            Code = "Missions:Return",
                            Description = "任务管理退回",
                            Order = 72,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 73,
                            Code = "Missions:Execute",
                            Description = "任务管理执行",
                            Order = 73,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 74,
                            Code = "Missions:NoTest",
                            Description = "任务管理无需测试",
                            Order = 74,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 75,
                            Code = "Missions:Calender",
                            Description = "任务日历",
                            Order = 75,
                            ParentId = 68,
                            Type = 1
                        },
                        new
                        {
                            Id = 76,
                            Code = "Missions:Printer",
                            Description = "任务条码打印",
                            Order = 76,
                            ParentId = 68,
                            Type = 2
                        },
                        new
                        {
                            Id = 77,
                            Code = "inspectionRecord",
                            Description = "结果录入",
                            Order = 77,
                            ParentId = 67,
                            Type = 1
                        },
                        new
                        {
                            Id = 78,
                            Code = "InspectionRecord:Sampling",
                            Description = "采样",
                            Order = 78,
                            ParentId = 77,
                            Type = 1
                        },
                        new
                        {
                            Id = 79,
                            Code = "InspectionRecord:Incubation",
                            Description = "孵化",
                            Order = 79,
                            ParentId = 77,
                            Type = 1
                        },
                        new
                        {
                            Id = 80,
                            Code = "InspectionRecord:Testing",
                            Description = "测试",
                            Order = 80,
                            ParentId = 77,
                            Type = 1
                        },
                        new
                        {
                            Id = 81,
                            Code = "InspectionRecord:ResultEntry",
                            Description = "录入",
                            Order = 81,
                            ParentId = 77,
                            Type = 1
                        },
                        new
                        {
                            Id = 82,
                            Code = "InspectionRecord:EditDeviceImport",
                            Description = "编辑设备导入数据",
                            Order = 82,
                            ParentId = 77,
                            Type = 1
                        },
                        new
                        {
                            Id = 83,
                            Code = "InspectionRecord:Notest",
                            Description = "结果录入无需测试",
                            Order = 83,
                            ParentId = 77,
                            Type = 1
                        },
                        new
                        {
                            Id = 84,
                            Code = "auditPrompt",
                            Description = "审核批准",
                            Order = 84,
                            Type = 1
                        },
                        new
                        {
                            Id = 85,
                            Code = "AuditPrompt:ReTest",
                            Description = "审核批准再测试",
                            Order = 85,
                            ParentId = 84,
                            Type = 2
                        },
                        new
                        {
                            Id = 86,
                            Code = "AuditPrompt:Notest",
                            Description = "审核批准无需测试",
                            Order = 86,
                            ParentId = 84,
                            Type = 1
                        },
                        new
                        {
                            Id = 87,
                            Code = "AuditPrompt:Approve",
                            Description = "批准",
                            Order = 87,
                            ParentId = 84,
                            Type = 2
                        },
                        new
                        {
                            Id = 88,
                            Code = "AuditPrompt:Review",
                            Description = "审核",
                            Order = 88,
                            ParentId = 84,
                            Type = 2
                        },
                        new
                        {
                            Id = 89,
                            Code = "AuditPrompt:Edit",
                            Description = "复核修改数据",
                            Order = 89,
                            ParentId = 84,
                            Type = 2
                        },
                        new
                        {
                            Id = 90,
                            Code = "plan",
                            Description = "检验计划",
                            Order = 90,
                            Type = 1
                        },
                        new
                        {
                            Id = 91,
                            Code = "Plan:Add",
                            Description = "计划添加",
                            Order = 91,
                            ParentId = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 92,
                            Code = "Plan:Edit",
                            Description = "计划编辑",
                            Order = 92,
                            ParentId = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 93,
                            Code = "Plan:Approve",
                            Description = "计划批准",
                            Order = 93,
                            ParentId = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 94,
                            Code = "Plan:Effective",
                            Description = "计划激活",
                            Order = 94,
                            ParentId = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 95,
                            Code = "Plan:Retire",
                            Description = "计划废弃",
                            Order = 95,
                            ParentId = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 96,
                            Code = "Plan:AddToPool",
                            Description = "计划添加到任务列表",
                            Order = 96,
                            ParentId = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 97,
                            Code = "Plan:Calender",
                            Description = "计划日历",
                            Order = 97,
                            ParentId = 90,
                            Type = 1
                        },
                        new
                        {
                            Id = 98,
                            Code = "analyse",
                            Description = "分析报表",
                            Order = 98,
                            Type = 1
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            IsHidden = true,
                            Name = "超级管理员"
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            IsHidden = false,
                            Name = "管理员"
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.RoleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("RoleAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            PermissionId = 4,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.RolePermissionAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("RolePermissionAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMail")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InitialQualificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastMonitoredDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastPasswordModified")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NextQualificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("PasswordExpiryPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account = "super",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            IsHidden = true,
                            Password = "l8YyUDcfKuGGgLaMKT4E6mg/8ClZOK8tczolqvakrA8=",
                            Salt = "f5ZTUveTZ6szf7wR3qCmvg==",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Account = "ESys_Admin",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            IsHidden = true,
                            Password = "gIbsDs1b73xjUyptJmm1RjjX8HiJ3ubnt1F/mS6mzio=",
                            Salt = "kCXBD/crXrivLJwcfWEoHQ==",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Account = "Admin",
                            CreateBy = 1,
                            CreatedTime = 1306144604160000480L,
                            IsActive = true,
                            IsHidden = false,
                            Password = "QnVVjchwQROIbFPB7PrnYD3htnV5F4AJrfWnsej4JQk=",
                            RealName = "Admin",
                            Salt = "tJ48HTFvFBHIWRnO8pxLpQ==",
                            Status = 0
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.UserAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasColumnType("TEXT");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("InitialQualificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastMonitoredDate")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastPasswordModified")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("NextQualificationDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PasswordExpiryPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Logined")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistory");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserPasswordHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswordHistory");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DashboardConfig")
                        .HasColumnType("TEXT");

                    b.Property<string>("Locale")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserSettings")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            RoleId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ESys.Security.Entity.UserRoleAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("UserRoleAudit");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserV", b =>
                {
                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationBreadcrumb")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationFullName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RealName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.ToView("UserV");
                });

            modelBuilder.Entity("ESys.System.Entity.ConfigItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Property")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConfigItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateBy = 0,
                            CreatedTime = 0L,
                            Property = "LOCATION_TYPE_WEIGHT_LEVEL_COUNT",
                            Value = "8"
                        });
                });

            modelBuilder.Entity("ESys.System.Entity.ConfigItemAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Property")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("ConfigItemAudit");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.SubWorkflowTemplateMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChindId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChindId");

                    b.HasIndex("ParentId");

                    b.ToTable("SubWorkflowTemplateMapping");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.SubWorkflowTemplateMappingAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChindId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NodeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("SubWorkflowTemplateMappingAudit");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.WorkflowParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContextJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowInstanceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowParameter");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.WorkflowTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutorJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowTemplate");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.WorkflowTemplateAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<long>("AuditTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExecutorJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GraphJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkflowId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("WorkflowTemplateAudit");
                });

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalItem", b =>
                {
                    b.HasOne("ESys.Approval.Entity.ApprovalEntity", "ApprovalEntity")
                        .WithMany("ApprovalItems")
                        .HasForeignKey("ApprovalEntityId");

                    b.Navigation("ApprovalEntity");
                });

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalStep", b =>
                {
                    b.HasOne("ESys.Approval.Entity.ApprovalEntity", "ApprovalEntity")
                        .WithMany("ApprovalSteps")
                        .HasForeignKey("ApprovalEntityId");

                    b.Navigation("ApprovalEntity");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Cycle", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany("Cycles")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.DataTypeSign", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Sign", "Sign")
                        .WithMany()
                        .HasForeignKey("SignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");

                    b.Navigation("Sign");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Equipment", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.DeviceConfig", "DeviceConfig")
                        .WithOne()
                        .HasForeignKey("ESys.Infrastructure.Entity.Equipment", "DeviceConfigId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ESys.Infrastructure.Entity.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");

                    b.Navigation("DeviceConfig");

                    b.Navigation("EquipmentType");

                    b.Navigation("Location");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitDef", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LimitType", "LimitType")
                        .WithMany()
                        .HasForeignKey("LimitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.LimitDef", "SourceLimitDef")
                        .WithMany()
                        .HasForeignKey("SourceLimitDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.LimitType", "SourceLimitType")
                        .WithMany()
                        .HasForeignKey("SourceLimitTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.TestType", "TestType")
                        .WithMany("LimitDefs")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LimitType");

                    b.Navigation("SourceLimitDef");

                    b.Navigation("SourceLimitType");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRule", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LimitRuleGroup", "LimitRuleGroup")
                        .WithMany("LimitRules")
                        .HasForeignKey("LimitRuleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.LimitToken", "LimitToken")
                        .WithMany()
                        .HasForeignKey("LimitTokenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ESys.Infrastructure.Entity.Sign", "SignAnd")
                        .WithMany()
                        .HasForeignKey("SignAndId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.Sign", "Sign")
                        .WithMany()
                        .HasForeignKey("SignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LimitRuleGroup");

                    b.Navigation("LimitToken");

                    b.Navigation("Measurement");

                    b.Navigation("Sign");

                    b.Navigation("SignAnd");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRuleGroup", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LimitDef", "LimitDef")
                        .WithMany("LimitRuleGroups")
                        .HasForeignKey("LimitDefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ESys.Schedule.Entity.Limit", null)
                        .WithMany("LimitRuleGroups")
                        .HasForeignKey("LimitId");

                    b.HasOne("ESys.Infrastructure.Entity.LimitRuleGroup", "Parent")
                        .WithMany("LimitRuleGroups")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LimitDef");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitTokenSign", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LimitToken", "LimitToken")
                        .WithMany()
                        .HasForeignKey("LimitTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Sign", "Sign")
                        .WithMany()
                        .HasForeignKey("SignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LimitToken");

                    b.Navigation("Sign");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Location", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.Classification", "SecondClassification")
                        .WithMany()
                        .HasForeignKey("SecondClassificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.VisioDiagram", "VisioDiagram")
                        .WithMany()
                        .HasForeignKey("VisioDiagramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Classification");

                    b.Navigation("LocationType");

                    b.Navigation("Parent");

                    b.Navigation("SecondClassification");

                    b.Navigation("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationExtra", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithOne("LocationExtra")
                        .HasForeignKey("ESys.Infrastructure.Entity.LocationExtra", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Map", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.MapCategory", "MapCategory")
                        .WithMany("Maps")
                        .HasForeignKey("MapCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MapCategory");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategory", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Map", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Measurement", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "ChildMeasurement")
                        .WithMany()
                        .HasForeignKey("ChildMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TestType", "TestType")
                        .WithMany("Measurements")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrameDilution", "TimeFrameDilution")
                        .WithMany()
                        .HasForeignKey("TimeFrameDilutionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany("Measurements")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChildMeasurement");

                    b.Navigation("DataType");

                    b.Navigation("TestType");

                    b.Navigation("TimeFrame");

                    b.Navigation("TimeFrameDilution");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementCycle", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Cycle", "Cycle")
                        .WithMany()
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "Measurement")
                        .WithMany("MeasurementCycles")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cycle");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementListDef", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "Measurement")
                        .WithMany("MeasurementListDefs")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementSign", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "Measurement")
                        .WithMany("MeasurementSigns")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Sign", "Sign")
                        .WithMany()
                        .HasForeignKey("SignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("Sign");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MeasurementUOM", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "Measurement")
                        .WithMany("MeasurementUOMs")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurement");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Media", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.GrowthPromotionStatus", "GrowthPromotionStatus")
                        .WithMany()
                        .HasForeignKey("GrowthPromotionStatusId");

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ESys.Infrastructure.Entity.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId");

                    b.Navigation("GrowthPromotionStatus");

                    b.Navigation("Location");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Organism", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.OrganismGenus", "OrganismGenus")
                        .WithMany()
                        .HasForeignKey("OrganismGenusId");

                    b.HasOne("ESys.Infrastructure.Entity.OrganismSeverity", "OrganismSeverity")
                        .WithMany()
                        .HasForeignKey("OrganismSeverityId");

                    b.Navigation("OrganismGenus");

                    b.Navigation("OrganismSeverity");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismChar", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.OrganismType", "OrganismType")
                        .WithMany()
                        .HasForeignKey("OrganismTypeId");

                    b.Navigation("OrganismType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.OrganismGenus", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.OrganismType", "OrganismType")
                        .WithMany()
                        .HasForeignKey("OrganismTypeId");

                    b.Navigation("OrganismType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.PersonnelSite", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.TestType", "TestType")
                        .WithMany("PersonnelSites")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Product", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SeverityLocation", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("ESys.Infrastructure.Entity.Organism", "Organism")
                        .WithMany("SeverityLocations")
                        .HasForeignKey("OrganismId");

                    b.HasOne("ESys.Infrastructure.Entity.OrganismSeverity", "OrganismSeverity")
                        .WithMany()
                        .HasForeignKey("OrganismSeverityId");

                    b.Navigation("Location");

                    b.Navigation("Organism");

                    b.Navigation("OrganismSeverity");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Site", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany("Sites")
                        .HasForeignKey("LocationId")
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Classification", "SecondClassification")
                        .WithMany()
                        .HasForeignKey("SecondClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.SiteType", "SiteType")
                        .WithMany("Sites")
                        .HasForeignKey("SiteTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Classification");

                    b.Navigation("Location");

                    b.Navigation("SecondClassification");

                    b.Navigation("SiteType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestCategory", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.TestClass", "TestClass")
                        .WithMany()
                        .HasForeignKey("TestClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestClass");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestType", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "ProdSelectionTimeFrame")
                        .WithMany()
                        .HasForeignKey("ProdSelectionTimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("TestCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TestTypeCode", "TestTypeCode")
                        .WithMany()
                        .HasForeignKey("TestTypeCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TestTypeLabel", "TestTypeLabel")
                        .WithMany()
                        .HasForeignKey("TestTypeLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("ProdSelectionTimeFrame");

                    b.Navigation("TestCategory");

                    b.Navigation("TestTypeCode");

                    b.Navigation("TestTypeLabel");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeEquipment", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany("TestTypeEquipments")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestTypeMedia", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany("TestTypeMedias")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaType");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrame", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "ClonedTimeFrame")
                        .WithMany()
                        .HasForeignKey("ClonedTimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Infrastructure.Entity.TestStage", "TestStage")
                        .WithMany()
                        .HasForeignKey("TestStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TestType", "TestType")
                        .WithMany("TimeFrames")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClonedTimeFrame");

                    b.Navigation("TestStage");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameDilution", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.TestType", "TestType")
                        .WithMany("TimeFrameDilutions")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany("TimeFrameDilutions")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TestType");

                    b.Navigation("TimeFrame");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrameEvent", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LimitDef", "LimitDef")
                        .WithMany()
                        .HasForeignKey("LimitDefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "NextTimeFrame")
                        .WithMany()
                        .HasForeignKey("NextTimeFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany("TimeFrameEvents")
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LimitDef");

                    b.Navigation("NextTimeFrame");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagram", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Map", "Map")
                        .WithMany("VisioDiagrams")
                        .HasForeignKey("MapId")
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioLocation", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.VisioDiagram", "VisioDiagram")
                        .WithMany("VisioLocations")
                        .HasForeignKey("VisioDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioSite", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.VisioDiagram", "VisioDiagram")
                        .WithMany("VisioSites")
                        .HasForeignKey("VisioDiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("VisioDiagram");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMail", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMailAttachment", b =>
                {
                    b.HasOne("ESys.Notification.Entity.EMail", "EMail")
                        .WithMany("Attachments")
                        .HasForeignKey("EMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMail");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Notification", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.Deviation", "Deviation")
                        .WithMany()
                        .HasForeignKey("DeviationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Infrastructure.Entity.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Notification.Entity.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Deviation");

                    b.Navigation("Equipment");

                    b.Navigation("Media");

                    b.Navigation("NotificationType");

                    b.Navigation("Sample");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationEMail", b =>
                {
                    b.HasOne("ESys.Notification.Entity.EMail", "EMail")
                        .WithMany("NotificationEMails")
                        .HasForeignKey("EMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Notification.Entity.Notification", "Notification")
                        .WithMany("NotificationEMails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EMail");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Subscription", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Notification.Entity.NotificationType", "NotificationType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Batch", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.CurrentWorkSpace", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Security.Entity.User", "ExecuteUser")
                        .WithMany()
                        .HasForeignKey("ExecuteUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Security.Entity.User", "LastUser")
                        .WithMany()
                        .HasForeignKey("LastUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "NoTestUser")
                        .WithMany()
                        .HasForeignKey("NoTestUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "ParentCurrentWorkSpace")
                        .WithMany()
                        .HasForeignKey("ParentCurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Security.Entity.User", "PerformedUser")
                        .WithMany()
                        .HasForeignKey("PerformedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany("CurrentWorkSpaces")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TestStage", "TestStage")
                        .WithMany()
                        .HasForeignKey("TestStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrame", "TimeFrame")
                        .WithMany()
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Batch");

                    b.Navigation("ExecuteUser");

                    b.Navigation("Group");

                    b.Navigation("LastUser");

                    b.Navigation("Location");

                    b.Navigation("NoTestUser");

                    b.Navigation("ParentCurrentWorkSpace");

                    b.Navigation("PerformedUser");

                    b.Navigation("Plan");

                    b.Navigation("Sample");

                    b.Navigation("Test");

                    b.Navigation("TestStage");

                    b.Navigation("TimeFrame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Deviation", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "CurrentWorkSpace")
                        .WithMany("Deviations")
                        .HasForeignKey("CurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Limit", "Limit")
                        .WithMany()
                        .HasForeignKey("LimitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.LimitType", "LimitType")
                        .WithMany()
                        .HasForeignKey("LimitTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Schedule.Entity.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CurrentWorkSpace");

                    b.Navigation("Limit");

                    b.Navigation("LimitType");

                    b.Navigation("Sample");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.FileAttachment", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "CurrentWorkSpace")
                        .WithMany()
                        .HasForeignKey("CurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentWorkSpace");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Limit", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.LimitDef", "LimitDef")
                        .WithMany()
                        .HasForeignKey("LimitDefId");

                    b.HasOne("ESys.Schedule.Entity.LimitExceeded", "LimitExceeded")
                        .WithMany()
                        .HasForeignKey("LimitExceededId");

                    b.HasOne("ESys.Infrastructure.Entity.LimitType", "LimitType")
                        .WithMany()
                        .HasForeignKey("LimitTypeId");

                    b.HasOne("ESys.Schedule.Entity.Limit", "ParentLimit")
                        .WithMany()
                        .HasForeignKey("ParentLimitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.HasOne("ESys.Infrastructure.Entity.LimitDef", "SourceLimitDef")
                        .WithMany()
                        .HasForeignKey("SourceLimitDefId");

                    b.HasOne("ESys.Infrastructure.Entity.LimitType", "SourceLimitType")
                        .WithMany()
                        .HasForeignKey("SourceLimitTypeId");

                    b.HasOne("ESys.Schedule.Entity.Test", "Test")
                        .WithMany("Limits")
                        .HasForeignKey("TestId");

                    b.Navigation("LimitDef");

                    b.Navigation("LimitExceeded");

                    b.Navigation("LimitType");

                    b.Navigation("ParentLimit");

                    b.Navigation("Site");

                    b.Navigation("SourceLimitDef");

                    b.Navigation("SourceLimitType");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.LimitExceeded", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.Limit", "FrequencyLimit")
                        .WithMany()
                        .HasForeignKey("FrequencyLimitId");

                    b.HasOne("ESys.Schedule.Entity.Limit", "Limit")
                        .WithMany()
                        .HasForeignKey("LimitId");

                    b.HasOne("ESys.Infrastructure.Entity.LimitType", "LimitType")
                        .WithMany()
                        .HasForeignKey("LimitTypeId");

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId");

                    b.Navigation("FrequencyLimit");

                    b.Navigation("Limit");

                    b.Navigation("LimitType");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ParticleCounterData", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId");

                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.Navigation("Equipment");

                    b.Navigation("Sample");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Plan", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.TestFrequencyType", "AutoFillFrequencyType")
                        .WithMany()
                        .HasForeignKey("AutoFillFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.EnvironmentDef", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.PlanGroup", "PlanGroup")
                        .WithMany("Plans")
                        .HasForeignKey("PlanGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AutoFillFrequencyType");

                    b.Navigation("Environment");

                    b.Navigation("Group");

                    b.Navigation("Location");

                    b.Navigation("PlanGroup");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Reading", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Organism", "Organism")
                        .WithMany()
                        .HasForeignKey("OrganismId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Sample", "ParentSample")
                        .WithMany()
                        .HasForeignKey("ParentSampleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Sign", "Sign")
                        .WithMany()
                        .HasForeignKey("SignId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Measurement");

                    b.Navigation("Organism");

                    b.Navigation("ParentSample");

                    b.Navigation("Sample");

                    b.Navigation("Sign");

                    b.Navigation("Test");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ResultEntry.CompareDataRemark", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.ParticleCounterData", "ParticleCounterData")
                        .WithMany("CompareDataRemarks")
                        .HasForeignKey("ParticleCounterDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParticleCounterData");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.RptSampleMart", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.EnvironmentDef", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Environment");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Sample", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Deviation", "Deviation")
                        .WithMany()
                        .HasForeignKey("DeviationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.EnvironmentDef", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Infrastructure.Entity.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Sample", "ParentSample")
                        .WithMany()
                        .HasForeignKey("ParentSampleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESys.Security.Entity.User", "PerformedUser")
                        .WithMany()
                        .HasForeignKey("PerformedUserId");

                    b.HasOne("ESys.Infrastructure.Entity.PersonnelSite", "PersonnelSite")
                        .WithMany()
                        .HasForeignKey("PersonnelSiteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Security.Entity.User", "PersonnelUser")
                        .WithMany()
                        .HasForeignKey("PersonnelUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedUser");

                    b.Navigation("Deviation");

                    b.Navigation("Environment");

                    b.Navigation("Equipment");

                    b.Navigation("Media");

                    b.Navigation("ParentSample");

                    b.Navigation("PerformedUser");

                    b.Navigation("PersonnelSite");

                    b.Navigation("PersonnelUser");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.SampleReview", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sample");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TableNote", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Test", b =>
                {
                    b.HasOne("ESys.Infrastructure.Entity.EnvironmentDef", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.NotificationFrequency", "NotificationFrequency")
                        .WithMany()
                        .HasForeignKey("NotificationFrequencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.Test", "ParentTest")
                        .WithMany()
                        .HasForeignKey("ParentTestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Plan", "Plan")
                        .WithMany("Tests")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Schedule.Entity.TestFrequency", "TestFrequency")
                        .WithMany()
                        .HasForeignKey("TestFrequencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.TestFrequencyOccurrence", "TestFrequencyOccurrence")
                        .WithMany()
                        .HasForeignKey("TestFrequencyOccurrenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.TestFrequencyType", "TestFrequencyType")
                        .WithMany()
                        .HasForeignKey("TestFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TestType", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.TimeFrameDilution", "TimeFrameDilution")
                        .WithMany()
                        .HasForeignKey("TimeFrameDilutionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Environment");

                    b.Navigation("Group");

                    b.Navigation("NotificationFrequency");

                    b.Navigation("ParentTest");

                    b.Navigation("Plan");

                    b.Navigation("Site");

                    b.Navigation("TestFrequency");

                    b.Navigation("TestFrequencyOccurrence");

                    b.Navigation("TestFrequencyType");

                    b.Navigation("TestType");

                    b.Navigation("TimeFrameDilution");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.TestFrequency", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.TestFrequencyOccurrence", "TestFrequencyOccurrence")
                        .WithMany()
                        .HasForeignKey("TestFrequencyOccurrenceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESys.Schedule.Entity.TestFrequencyType", "TestFrequencyType")
                        .WithMany()
                        .HasForeignKey("TestFrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestFrequencyOccurrence");

                    b.Navigation("TestFrequencyType");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceEquipment", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "CurrentWorkSpace")
                        .WithMany()
                        .HasForeignKey("CurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentWorkSpace");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceMedia", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "CurrentWorkSpace")
                        .WithMany()
                        .HasForeignKey("CurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentWorkSpace");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceOrganism", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "CurrentWorkSpace")
                        .WithMany()
                        .HasForeignKey("CurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Organism", "Organism")
                        .WithMany()
                        .HasForeignKey("OrganismId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentWorkSpace");

                    b.Navigation("Organism");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.WorkSpaceProduct", b =>
                {
                    b.HasOne("ESys.Schedule.Entity.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId");

                    b.HasOne("ESys.Schedule.Entity.CurrentWorkSpace", "CurrentWorkSpace")
                        .WithMany()
                        .HasForeignKey("CurrentWorkSpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ESys.Infrastructure.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ESys.Schedule.Entity.Sample", "Sample")
                        .WithMany()
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("CurrentWorkSpace");

                    b.Navigation("Product");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("ESys.Security.Entity.Department", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("ESys.Security.Entity.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Manager");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignature", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignatureItem", b =>
                {
                    b.HasOne("ESys.Security.Entity.ElectronicSignature", "ElectronicSignature")
                        .WithMany("ElectronicSignatureItems")
                        .HasForeignKey("ElectronicSignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectronicSignature");
                });

            modelBuilder.Entity("ESys.Security.Entity.Permission", b =>
                {
                    b.HasOne("ESys.Security.Entity.Permission", "Parent")
                        .WithMany("SubPermissions")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Security.Entity.RolePermission", b =>
                {
                    b.HasOne("ESys.Security.Entity.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ESys.Security.Entity.User", b =>
                {
                    b.HasOne("ESys.Security.Entity.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ESys.Infrastructure.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserHistory", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserPasswordHistory", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany("UserPasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserProfile", b =>
                {
                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ESys.Security.Entity.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Security.Entity.UserRole", b =>
                {
                    b.HasOne("ESys.Security.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESys.Security.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.SubWorkflowTemplateMapping", b =>
                {
                    b.HasOne("ESys.Workflow.Entity.WorkflowTemplate", "Chind")
                        .WithMany("ChildrenMapping")
                        .HasForeignKey("ChindId");

                    b.HasOne("ESys.Workflow.Entity.WorkflowTemplate", "Parent")
                        .WithMany("ParentsMapping")
                        .HasForeignKey("ParentId");

                    b.Navigation("Chind");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ESys.Approval.Entity.ApprovalEntity", b =>
                {
                    b.Navigation("ApprovalItems");

                    b.Navigation("ApprovalSteps");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitDef", b =>
                {
                    b.Navigation("LimitRuleGroups");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LimitRuleGroup", b =>
                {
                    b.Navigation("LimitRuleGroups");

                    b.Navigation("LimitRules");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Location", b =>
                {
                    b.Navigation("LocationExtra");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Map", b =>
                {
                    b.Navigation("VisioDiagrams");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.MapCategory", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Measurement", b =>
                {
                    b.Navigation("MeasurementCycles");

                    b.Navigation("MeasurementListDefs");

                    b.Navigation("MeasurementSigns");

                    b.Navigation("MeasurementUOMs");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.Organism", b =>
                {
                    b.Navigation("SeverityLocations");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.SiteType", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TestType", b =>
                {
                    b.Navigation("LimitDefs");

                    b.Navigation("Measurements");

                    b.Navigation("PersonnelSites");

                    b.Navigation("TimeFrameDilutions");

                    b.Navigation("TimeFrames");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.TimeFrame", b =>
                {
                    b.Navigation("Cycles");

                    b.Navigation("Measurements");

                    b.Navigation("TestTypeEquipments");

                    b.Navigation("TestTypeMedias");

                    b.Navigation("TimeFrameDilutions");

                    b.Navigation("TimeFrameEvents");
                });

            modelBuilder.Entity("ESys.Infrastructure.Entity.VisioDiagram", b =>
                {
                    b.Navigation("VisioLocations");

                    b.Navigation("VisioSites");
                });

            modelBuilder.Entity("ESys.Notification.Entity.EMail", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("NotificationEMails");
                });

            modelBuilder.Entity("ESys.Notification.Entity.Notification", b =>
                {
                    b.Navigation("NotificationEMails");
                });

            modelBuilder.Entity("ESys.Notification.Entity.NotificationType", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.CurrentWorkSpace", b =>
                {
                    b.Navigation("Deviations");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Limit", b =>
                {
                    b.Navigation("LimitRuleGroups");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.ParticleCounterData", b =>
                {
                    b.Navigation("CompareDataRemarks");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Plan", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.PlanGroup", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Sample", b =>
                {
                    b.Navigation("CurrentWorkSpaces");
                });

            modelBuilder.Entity("ESys.Schedule.Entity.Test", b =>
                {
                    b.Navigation("Limits");
                });

            modelBuilder.Entity("ESys.Security.Entity.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ESys.Security.Entity.ElectronicSignature", b =>
                {
                    b.Navigation("ElectronicSignatureItems");
                });

            modelBuilder.Entity("ESys.Security.Entity.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SubPermissions");
                });

            modelBuilder.Entity("ESys.Security.Entity.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ESys.Security.Entity.User", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("UserPasswordHistories");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ESys.Workflow.Entity.WorkflowTemplate", b =>
                {
                    b.Navigation("ChildrenMapping");

                    b.Navigation("ParentsMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
